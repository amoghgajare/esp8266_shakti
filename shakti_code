#include <stdio.h>
#include "gpio.h"
#include "utils.h"
#include "platform.h"

int rd_bar=8,wr_bar=9,intr_bar=10;
int ma0=2,ma1=3,ma2=4,ma3=12,ma4=13;
int v1,v2,v3,v4,curr,temp,soc,soh; 
int count = 0;
float current = 1000;            //in millamperes
float crated = 3950; 
int soc1, soc2, soc3, soc4; 
float socInt1 = 99, socInt2 = 97, socInt3 = 98 , socInt4 = 97;             //initial SOC
float socFinal1, socFinal2, socFinal3, socFinal4;     //final SOC
#define SMOOTH_CAP 200
int nominalChargeCapacity=3400;
int batteryChargeCapacity=3230;
int CHARGING=0;
int socChargeStartSOC;
int soc_charged;
int availableCharge;
int chargeAvailableAtChargeStart;
int cycle=0;
int recordChargeStartSOC=0;

int main(){
	while(1){
		cycle=cycle+1;
		write_word(GPIO_DIRECTION_CNTRL_REG,0x00000000);
if(read_word(GPIO_DATA_REG)==1)
{
	CHARGING=1;
}

        //CHANNEL 1 DATA
		write_word(GPIO_DIRECTION_CNTRL_REG,0x0000331C);
		write_word(GPIO_DATA_REG,0x00001300); //8,9,12
		delay_loop(5000,2000);
		int data1 = read_word(GPIO_DATA_REG);
		if(data1==5888){
			//Conversion needs to be done
			// Give negative pulse on wr_bar 9
			write_word(GPIO_DATA_REG,0x00001100);
			delay_loop(10,10);
			write_word(GPIO_DATA_REG,0x00001300); //8,9,12
			//Now wait for conversion
			// Delay greater than 40U sec
			delay(1);
		}
		else{
			//Conversion done
			// ma3 read mode
			write_word(GPIO_DIRECTION_CNTRL_REG,0x00000300);// 8 & 9 Control
			// give negative pulse on rd_bar
			write_word(GPIO_DATA_REG,0x00000200);
			delay_loop(1,1);
			write_word(GPIO_DATA_REG,0x00000300);
            delay_loop(1,1);
            write_word(GPIO_DIRECTION_CNTRL_REG,0x00000000);
			v1 = read_word(GPIO_DATA_REG);
			
		}
		delay(10);

        //CHANNEL 2 DATA
		write_word(GPIO_DIRECTION_CNTRL_REG,0x0000331C);
		write_word(GPIO_DATA_REG,0x00001304); //2,8,9,12
		delay_loop(5000,2000);
		int data2 = read_word(GPIO_DATA_REG);
		if(data2==5892){
			//Conversion needs to be done
			// Give negative pulse on wr_bar 9
			write_word(GPIO_DATA_REG,0x00001104);
			delay_loop(10,10);
			write_word(GPIO_DATA_REG,0x00001304); //2,8,9,12
			//Now wait for conversion
			// Delay greater than 40U sec
			delay(1);
		}
		else{
			//Conversion done
			// ma0,ma3 read mode
			write_word(GPIO_DIRECTION_CNTRL_REG,0x00000300);// 8 & 9 Control
			// give negative pulse on rd_bar
			write_word(GPIO_DATA_REG,0x00000200);
			delay_loop(1,1);
			write_word(GPIO_DATA_REG,0x00000300);
			delay_loop(1,1);
            write_word(GPIO_DIRECTION_CNTRL_REG,0x00000000);
			v2 = read_word(GPIO_DATA_REG);
		}
		delay(10);

        //CHANNEL 3 DATA
		write_word(GPIO_DIRECTION_CNTRL_REG,0x0000331C);
		write_word(GPIO_DATA_REG,0x00001308); //3,8,9,12
		delay_loop(5000,2000);
	
		int data3 = read_word(GPIO_DATA_REG);
		if(data3==5896){
			//Conversion needs to be done
			// Give negative pulse on wr_bar 9
			write_word(GPIO_DATA_REG,0x00001108);
			delay_loop(10,10);
			write_word(GPIO_DATA_REG,0x00001308); //3,8,9,12
			// Delay greater than 40U sec
			delay(1);
		}
		else{
			
			// ma3 read mode
			write_word(GPIO_DIRECTION_CNTRL_REG,0x00000300);// 8 & 9 Control
			// give negative pulse on rd_bar
			write_word(GPIO_DATA_REG,0x00000200);
			delay_loop(1,1);
			write_word(GPIO_DATA_REG,0x00000300);
			delay_loop(1,1);
            write_word(GPIO_DIRECTION_CNTRL_REG,0x00000000);
			v3 = read_word(GPIO_DATA_REG);
		}
		delay(10);

        //CHANNEL 4 DATA
		write_word(GPIO_DIRECTION_CNTRL_REG,0x0000331C);
		write_word(GPIO_DATA_REG,0x0000130c); //2,3,8,9,12
		delay_loop(5000,2000);
		
		int data4 = read_word(GPIO_DATA_REG);
		
		if(data4==5900){
			
			// Give negative pulse on wr_bar 9
			write_word(GPIO_DATA_REG,0x0000110c);
			delay_loop(10,10);
			write_word(GPIO_DATA_REG,0x0000130c); //2,3,8,9,12
			
			// Delay greater than 40U sec
			delay(1);
		}
		else{
			
			// ma3 read mode
			write_word(GPIO_DIRECTION_CNTRL_REG,0x00000300);// 8 & 9 Control
			// give negative pulse on rd_bar
			write_word(GPIO_DATA_REG,0x00000200);
			delay_loop(1,1);
			write_word(GPIO_DATA_REG,0x00000300);
			delay_loop(1,1);
            write_word(GPIO_DIRECTION_CNTRL_REG,0x00000000);
			v4 = read_word(GPIO_DATA_REG);
		}
		delay(10);

        //CHANNEL 5 DATA (CURRENT)
		write_word(GPIO_DIRECTION_CNTRL_REG,0x0000331C);
		write_word(GPIO_DATA_REG,0x00001310); //4,8,9,12
		delay_loop(5000,2000);
		
		int data5 = read_word(GPIO_DATA_REG);
		
		if(data5==5904){
			
			// Give negative pulse on wr_bar 9
			write_word(GPIO_DATA_REG,0x00001110);
			delay_loop(10,10);
			write_word(GPIO_DATA_REG,0x00001310); //4,8,9,12
			
			// Delay greater than 40U sec
			delay(1);
		}
		else{
			
			// ma3 read mode
			write_word(GPIO_DIRECTION_CNTRL_REG,0x00000300);// 8 & 9 Control
			// give negative pulse on rd_bar
			write_word(GPIO_DATA_REG,0x00000200);
			delay_loop(1,1);
			write_word(GPIO_DATA_REG,0x00000300);
			delay_loop(1,1);
            write_word(GPIO_DIRECTION_CNTRL_REG,0x00000002);
            curr=(read_word(GPIO_DATA_REG)*5)/256; 
		}
		delay(10);

        //CHANNEL 6 DATA (TEMPERATURE)
		write_word(GPIO_DIRECTION_CNTRL_REG,0x0000331C);
		write_word(GPIO_DATA_REG,0x00001314); //2,4,8,9,12
		delay_loop(5000,2000);
		
		int data6 = read_word(GPIO_DATA_REG);
		
		if(data6==5900){
			
			// Give negative pulse on wr_bar 9
			write_word(GPIO_DATA_REG,0x00001114);
			delay_loop(10,10);
			write_word(GPIO_DATA_REG,0x00001314); //2,4,8,9,12
			
			// Delay greater than 40U sec
			delay(1);
		}
		else{
			
			// ma3 read mode
			write_word(GPIO_DIRECTION_CNTRL_REG,0x00000300);// 8 & 9 Control
			// give negative pulse on rd_bar
			write_word(GPIO_DATA_REG,0x00000200);
			delay_loop(1,1);
			write_word(GPIO_DATA_REG,0x00000300);
			delay_loop(1,1);
            write_word(GPIO_DIRECTION_CNTRL_REG,0x00000000);
			temp = 32;
		}
		delay(10);

for(count = 0; count <50; count++){
socFinal1 = socInt1 - (current/crated);
socInt1 = socFinal1;
printf("%f \n", socFinal1);

socFinal2 = socInt2 -(current/crated);
socInt2 = socFinal2;
printf("%f \n", socFinal2);

socFinal3 = socInt3 - (current/crated);
socInt3 = socFinal3;
printf("%f \n", socFinal3);

socFinal4 = socInt4 - (current/crated);
socInt4 = socFinal4;
printf("%f \n", socFinal4);

}
soc=(socFinal1+socFinal2+socFinal3+socFinal4)/4;
if(recordChargeStartSOC==1)

soh = constrain(batteryChargeCapacity / nominalChargeCapacity*100, 0, 100);

if(CHARGING=1){
float socCharged = soc - socChargeStartSOC;
if (socCharged >= 50) {

            unsigned long expectedCharge = batteryChargeCapacity / 100 * soc_charged;
            unsigned long realCharge = availableCharge - chargeAvailableAtChargeStart;
            unsigned long oldCap = batteryChargeCapacity;
            unsigned long newCap = realCharge / socCharged * 100;
            
            batteryChargeCapacity = (oldCap / SMOOTH_CAP) * (SMOOTH_CAP - socCharged)
                    + (newCap / SMOOTH_CAP) * socCharged;
}

        printf("V1%d,V2%d,V3%d,V4%d,C%d,T%d,SOC%d,SOH%d",(v1*5/256),(v2*5/256),(v3*5/256),(v4*5/256),curr*4,temp,soc,soh);
	}
	
}
